public class BSTree 
{
	public BSTNode root;

	// default constructor to create an empty Tree
	public BSTree()
	{
		root = null;
	}

	// constructor that takes in a Node that makes the tree be of size 1 
	public BSTree(BSTNode k)
	{
		root = k;
	}
	
	// constructor that takes in a int that gets made into a Node 
	// that makes the tree be of size 1 
	public BSTree(int k)
	{
		root = new BSTNode(k);
	}
	
	public boolean insert(BSTNode nodeToBeAdded)
	{
		BSTNode temp = this.root;
		boolean inserted = false;
		
		if(root == null) //If no root exists
		{
			root = nodeToBeAdded;
			inserted = true;
		}
		else
		{
			if (temp.key < nodeToBeAdded.key)
			{
				if (temp.left != null)
				{
					temp = temp.left; //Look left
					nodeToBeAdded.parent = temp;
				}
				else
				{
					nodeToBeAdded.parent = temp;
					temp.left = nodeToBeAdded;
				}
			}
			else
			{
				temp = temp.right;//Look right
				nodeToBeAdded.parent = temp;
			}
			
			
		}
		
		
		if (inserted == false){System.out.println("Could not insert");}
		return inserted;
	}
	
	
	
	////////////////////////////////////
	
	public void inOrderPrint()
	   {
		inOrderPrint(root);
	   }
	
	private void inOrderPrint(BSTNode stRoot)
	   {
		if (stRoot != null)
	        {
			inOrderPrint(stRoot.left);
			System.out.println(stRoot.key);
			inOrderPrint(stRoot.right);
	        }
	   }
	
	
	
}