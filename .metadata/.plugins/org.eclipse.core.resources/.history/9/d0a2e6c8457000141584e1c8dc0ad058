import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.awt.event.*;

import javax.swing.*;
import javax.imageio.ImageIO;
import java.awt.*;
import java.util.*;
import javax.swing.*;
import java.awt.*;

/**
 * 
 */

/**
 * @author jarmenta
 *
 * @see http://stackoverflow.com/questions/10880083/get-rgb-of-a-bufferedimage
 * @see https://docs.oracle.com/javase/tutorial/displayCode.html?code=https://docs.oracle.com/javase/tutorial/uiswing/examples/components/TopLevelDemoProject/src/components/TopLevelDemo.java
 */
public class FinalProject {

	public static void main(String[] args) {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
		Frame frame = new RegionPartition();
    }
	
	public class RegionPartition extends JFrame
	{
	    JLayeredPane layeredPane;
	    JPanel regionBoard;
	    JLabel regionPiece;

	    private static int DELAY = 200;

	    private Color[] colors = new Color[]{Color.PINK, Color.GREEN, Color.BLACK, Color.RED};

	    public RegionPartition()
	    {
	        Dimension boardSize = new Dimension(500, 500);

	        //  Use a Layered Pane for this this application
	        layeredPane = new JLayeredPane();
	        getContentPane().add(layeredPane);
	        layeredPane.setPreferredSize(boardSize);

	        regionBoard = new JPanel();

	        layeredPane.add(regionBoard, JLayeredPane.DEFAULT_LAYER);

	        regionBoard.setLayout( new GridLayout(4, 4) );

	        regionBoard.setPreferredSize( boardSize );
	        regionBoard.setBounds(0, 0, boardSize.width, boardSize.height);

	        Random random = new Random();


	        for (int i = 0; i < 16; i++) {          
	            JPanel square = new JPanel(new BorderLayout());
	            square.setBorder(BorderFactory.createLineBorder(Color.black));
	            regionBoard.add( square );  

	            square.setBackground(Color.green);

	            int j=0;

	            square.setBackground(colors[j]);

	            j++;
	        }
	    }
  

	
	
	private void createAndShowGUI() {
		
		int red = 255;
		int green = 0;
		int blue = 255;
		
        //Create and set up the window.
        JFrame frame = new JFrame("TopLevelDemo");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
 
        //Create the menu bar.  Make it have a green background.
        JMenuBar greenMenuBar = new JMenuBar();
        greenMenuBar.setOpaque(true);
        greenMenuBar.setBackground(new Color(0, 255, 127));
        greenMenuBar.setPreferredSize(new Dimension(200, 100));
 
        //Create a yellow label to put in the content pane.
        JLabel yellowLabel = new JLabel();
        yellowLabel.setOpaque(true);
        yellowLabel.setBackground(new Color(0, 0, 255));
        yellowLabel.setPreferredSize(new Dimension(400, 400));
 
        //Set the menu bar and add the label to the content pane.
        frame.setJMenuBar(greenMenuBar);
 
        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }

	
	/**
	 * @param args
	 * @throws IOException 
	 */
	public void getRgbValue() throws Exception {

	    BufferedImage image = ImageIO.read(
	         new File("src/red.png"));

	    int w = image.getWidth();
	    int h = image.getHeight();

	    int[] dataBuffInt = image.getRGB(0, 0, w, h, null, 0, w); 
	    //startX the starting X coordinate
	    //startY the starting Y coordinate
	    //w width of region
	    //h height of region
	    //rgbArray if not null, the rgb pixels are written here
	    //offset offset into the rgbArray
	    //scansize scanline stride for the rgbArray
	    
	    int wxh = (w * h)-1; //multiply width & height to get total number of pixels
	    
	    while (wxh>0){
	    Color c = new Color(dataBuffInt[wxh]);
	    //print RGB value of pixel, starting bottom up
	    System.out.println(c.getRed() + " " + c.getGreen() + " " + c.getBlue() + " " + c.getAlpha());   // = (dataBuffInt[100] >> 16) & 0xFF
	    //subtract after each iteration
	    wxh--;
	    }
	}

	}}
