import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.Random;
import java.awt.event.*;

import javax.swing.*;
import javax.imageio.ImageIO;

/**
 * 
 */

/**
 * @author jarmenta
 *
 * @see http://stackoverflow.com/questions/10880083/get-rgb-of-a-bufferedimage
 * @see https://docs.oracle.com/javase/tutorial/displayCode.html?code=https://docs.oracle.com/javase/tutorial/uiswing/examples/components/TopLevelDemoProject/src/components/TopLevelDemo.java
 */
public class FinalProject {

	public static void main(String[] args) throws Exception {
				getRgbValue();
    }
	
	/**
	 * @param args
	 * @throws IOException 
	 */
	public static void getRgbValue() throws Exception {

	    BufferedImage image = ImageIO.read(
	         new File("src/red.png"));

	    int w = image.getWidth();
	    int h = image.getHeight();

	    int[] dataBuffInt = image.getRGB(0, 0, w, h, null, 0, w); 
	    //startX the starting X coordinate
	    //startY the starting Y coordinate
	    //w width of region
	    //h height of region
	    //rgbArray if not null, the rgb pixels are written here
	    //offset offset into the rgbArray
	    //scansize scanline stride for the rgbArray
	    
	    int wxh = (w * h)-1; //multiply width & height to get total number of pixels
	    
	    /**
	     * 
	     */
	    // while (wxh>0){
	    // Color c = new Color(dataBuffInt[wxh]);
	    //print RGB value of pixel, starting bottom up
	    // System.out.println(c.getRed() + " " + c.getGreen() + " " + c.getBlue() + " " + c.getAlpha());   // = (dataBuffInt[100] >> 16) & 0xFF
	    //subtract after each iteration
	    // wxh--;
	    //}
	    
	    
	    // GET RANDOM *******************************
	    Random rand = new Random();

		int  r = rand.nextInt(wxh); //wxh is the maximum
		
		System.out.println("Selected Pixel:" + r);
		Color c = new Color(dataBuffInt[r]);
	    //print RGB value of pixel, starting bottom up
	    System.out.println(c.getRed() + " " + c.getGreen() + " " + c.getBlue());  // = (dataBuffInt[100] >> 16) & 0xFF
	    //subtract after each iteration
	    
	    int randomRed = c.getRed();
	    int randomGreen = c.getGreen();
	    int randomBlue = c.getBlue();
	    
	    createAndShowGUI(randomRed, randomGreen, randomBlue);
	}

private static void createAndShowGUI(int randomRed, int randomGreen, int randomBlue) {
		
        //Create and set up the window.
        JFrame frame = new JFrame("Color Palette Maker");
        frame.setLayout(new FlowLayout());
 
        //Create the menu bar.  Make it have a green background.
        JMenuBar greenMenuBar = new JMenuBar();
        greenMenuBar.setOpaque(true);
        greenMenuBar.setBackground(new Color(1, 255, 127));
        greenMenuBar.setPreferredSize(new Dimension(200, 200));
        
        //Create color panel 1
        JPanel colorPanel1 = new JPanel();
        colorPanel1.setBackground(new Color(randomRed, randomBlue, randomGreen));
        colorPanel1.setPreferredSize(new Dimension(150, 500));
        
        //Create color panel 2
        JPanel colorPanel2 = new JPanel();
        colorPanel2.setBackground(new Color(randomBlue, randomGreen, randomRed));
        colorPanel2.setPreferredSize(new Dimension(150, 500));
        
        //Create color panel 3
        JPanel colorPanel3 = new JPanel();
        colorPanel3.setBackground(new Color(randomGreen, randomRed, randomBlue));
        colorPanel3.setPreferredSize(new Dimension(150, 500));
        
        
        //Set the menu bar and add the label to the content pane.
        frame.setLayout(new FlowLayout()); // <-- you need this for now
        
        frame.add(colorPanel1);
        frame.add(colorPanel2);
        frame.add(colorPanel3);
        
        Button button = new Button("Click me");
        button.addActionListener(main(null)); 
        
        frame.setVisible(true);

        // optional, but nice to have.
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
    }
}
