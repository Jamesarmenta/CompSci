{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf400
{\fonttbl\f0\fnil\fcharset0 InputSerif-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\b\fs22 \cf2 James Armenta - Exam 2 Corrections - 4/20/2015\
\
Problem #3\
Which traversal will process a binary search tree's nodes in sorted order?
\b0 \
In-Order Traversal\
\
------------\

\b Problem #4
\b0 \
private boolean contains(int key)\
	\{\
		int currElement = 0;\
		\
		if(mybst[0]==key)\
		\{\
			return true;\
		\}\
		\
		while (mybst[currElement]!=-1)\{\
			if(mybst[currElement]==key)\
			\{\
				return true;\
			\}\
			else if(mybst[currElement]>key)\
			\{\
				//revised minor error in exam here\
				//added "currElement ="\
				currElement = (currElement*2)+1;\
			\}\
			else\
			\{\
				//revised minor error in exam here\
				//added "currElement ="\
				currElement = (currElement*2)+2;\
			\}\
		\}\
		\
		return false;\
\
	\}\
\}\
\
------------\

\b Problem #6\
a) What is the output of the ExamQ program?
\b0 \
result = -5 42\
4 10 42 4 1 -5 7 10 8 7.\
\
//revised minor error by adding \
//printout of array\
\
\pard\pardeftab720

\b \cf2 b) Is the algorithm in the somealg method a divide and conquer algorithm? What makes it one, or what makes it fail to be one?\

\b0 Yes, as each recursive iteration divides the array further and further, until len (length of the segment) is small enough (size 1) to be handled.\
\
Once the size is appropriate, it 'conquers' by comparing two different segments as pairs, and then returning the smallest and largest int. After all segments have been compared, the final returned pair represents  the smallest and largest ints of the array.\
\
//added explanation to the 'conquer' portion of the algorithm.
\b \

\b0 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
Next Page...\
\
------------\

\b Problem #7\
\pard\pardeftab720

\b0 \cf2 	static int rmeth7(int x)\
	\{\
\pard\pardeftab720
\cf0 		//revised minor error by adding "+1" to parameter\
		//for thermeth method. The addition will allow \
		// last iteration to go through before returning total\cf2 \
\pard\pardeftab720
\cf2 		return thermeth7(1, 0, x+1);\
	\}\
	\
	static int thermeth7(int i, int t, int x)\
	\{\
		if (i==x)\
		\{\
			return t;\
		\}\
		if (i % 2==1)\
		\{\
			//corrected minor error by adding\
			// return and "x" to parameter space\
			return thermeth7(i+1,t+(i*5), x);\
		\}\
		else\
		\{\
\pard\pardeftab720
\cf0 			//corrected minor error by adding\
			// return and "x" to parameter space\cf2 \
\pard\pardeftab720
\cf2 			return thermeth7(i+1, t+i, x);\
		\}\
	\}\
	\
\}}